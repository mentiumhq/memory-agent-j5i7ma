[tool.poetry]
name = "memory-agent-backend"
version = "0.1.0"
description = "Memory Agent backend service for intelligent document storage and retrieval using Temporal workflows"
authors = ["Memory Agent Team"]
readme = "README.md"
packages = [
    { include = "src" }
]

[tool.poetry.dependencies]
python = "^3.11"

# Core Frameworks
temporalio = "^1.0.0"  # Workflow orchestration engine
fastapi = "^0.100.0"   # High-performance async web framework
pydantic = "^2.0.0"    # Data validation and settings
uvicorn = "^0.23.0"    # ASGI server for FastAPI

# Storage & Database
boto3 = "^1.28.0"      # AWS S3 integration
sqlalchemy = "^2.0.0"  # SQL toolkit and ORM
alembic = "^1.11.0"    # Database migrations
aiosqlite = "^0.19.0"  # Async SQLite support

# LLM Integration
openai = "^1.0.0"      # OpenAI API client

# Monitoring & Observability
prometheus-client = "^0.17.0"    # Metrics collection
opentelemetry-api = "^1.0.0"     # Telemetry API
opentelemetry-sdk = "^1.0.0"     # OpenTelemetry SDK
opentelemetry-instrumentation-fastapi = "^0.40.0"  # FastAPI instrumentation
opentelemetry-instrumentation-sqlalchemy = "^0.40.0"  # SQLAlchemy instrumentation

# Utilities
python-jose = {extras = ["cryptography"], version = "^3.3.0"}  # JWT handling
python-multipart = "^0.0.6"  # Form data parsing
aiohttp = "^3.8.0"    # Async HTTP client

[tool.poetry.group.dev.dependencies]
black = "^23.0.0"     # Code formatting
pytest = "^7.4.0"     # Testing framework
pytest-asyncio = "^0.21.0"  # Async test support
pytest-cov = "^4.1.0"  # Test coverage
mypy = "^1.5.0"      # Static type checking
pre-commit = "^3.3.0"  # Git hooks
ruff = "^0.0.291"    # Fast Python linter
types-boto3 = "^1.0.2"  # Type stubs for boto3
types-python-jose = "^3.3.4"  # Type stubs for python-jose

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
start = "python src/main.py"
test = "pytest"
lint = "black . && mypy src"
migrate = "alembic upgrade head"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_optional = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src --cov-report=term-missing"

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "B", "I", "N", "UP", "C90"]
ignore = ["E501"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "raise ImportError",
    "except ImportError:",
]